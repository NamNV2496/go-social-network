version: "3.8"

services:
    # mysql:
    #     image: mysql:8.3.0
    #     environment:
    #         MYSQL_ROOT_PASSWORD: root
    #         MYSQL_DATABASE: network
    #     ports:
    #         - "3309:3306"
    #     networks:
    #         - social

    # redis:
    #     image: redis:7-alpine
    #     ports:
    #         - "6379:6379"
    #     networks:
    #         - social

    # zookeeper:
    #     image: "bitnami/zookeeper:3.8.4-debian-12-r8"
    #     ports:
    #         - "2181:2181"
    #     networks:
    #         - social
    #     environment:
    #         - ALLOW_ANONYMOUS_LOGIN=yes

    # kafka:
    #     image: "bitnami/kafka:3.7.1-debian-12-r0"
    #     ports:
    #         - "29092:29092"
    #     networks:
    #         - social
    #     environment:
    #         - KAFKA_BROKER_ID=2
    #         - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092
    #         - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:29092
    #         - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    #         - ALLOW_PLAINTEXT_LISTENER=yes
    #     depends_on:
    #         - zookeeper

    # elasticsearch:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    #     container_name: elasticsearch
    #     environment:
    #         - discovery.type=single-node
    #         - ES_JAVA_OPTS=-Xms512m -Xmx512m
    #         - xpack.security.enabled=true
    #         - ELASTIC_USERNAME=elastic
    #         - ELASTIC_PASSWORD=admin
    #     ports:
    #         - 9200:9200 # for REST API access
    #     networks:
    #         - social
    #     # - 9300:9300 # for inter-node communication
    #     volumes:
    #         - esdata:/usr/share/elasticsearch/data
    
    # grafana
    grafana:
        image: grafana/grafana
        ports:
            - "3000:3000"
        container_name: grafana
        restart: unless-stopped
        networks:
            - social
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        depends_on:
            - prometheus
        volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana.ini:/etc/grafana/grafana.ini

    # Install prometheus and node-exporter
    prometheus:
        image: prom/prometheus
        container_name: prometheus
        ports:
            - "9090:9090"
        networks:
            - social
        volumes:
            - prometheus:/prometheus
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        
    # A Prometheus exporter that collects hardware and OS-level metrics from Linux and other Unix-like systems. Node Exporter enables monitoring of host-level resources and performance metrics.
    # exporter:
    #     image: prom/node-exporter:latest
    #     container_name: exporter
    #     ports:
    #         - "9100:9100"
    #     networks:
    #         - social
    #     volumes:
    #         - /proc:/host/proc:ro
    #         - /sys:/host/sys:ro
    #         - /:/rootfs:ro
    #     command:
    #         - "--path.procfs=/host/proc"
    #         - "--path.sysfs=/host/sys"
    #         - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"

    # http:
    #     build:
    #         context: .
    #         dockerfile: http_gateway/Dockerfile
    #     ports:
    #         - "8080:8080"
    #     depends_on:
    #         - newsfeed
    #         - post
    #         - user
    #         - message
    #         - mysql
    #         - redis
    #         - kafka
    #     networks:
    #         - social
    #     environment:
    #         - USER_URL=user:5610
    #         - POST_URL=post:5611
    #         - NEWSFEED_URL=newsfeed:5612

    # message:
    #     build:
    #         context: .
    #         dockerfile: message-service/Dockerfile
    #     networks:
    #         - social
    #     ports:
    #         - "8081:8081"

    # newsfeed:
    #     build:
    #         context: .
    #         dockerfile: newsfeed-service/Dockerfile
    #     ports:
    #         - "5612:5612"
    #     environment:
    #         - DATABASE_URL=root:root@tcp(mysql:3306)/network?parseTime=true
    #         - KAFKA_BROKER=kafka:29092
    #         - REDIS_URL=redis:6379 # Add this line to point to the Redis service
    #         - USER_URL=user:5610
    #         - NEWSFEED_URL=newsfeed:5612
    #     networks:
    #         - social
    #     depends_on:
    #         - mysql
    #         - kafka
    #         - redis

    # post:
    #     build:
    #         context: .
    #         dockerfile: post-service/Dockerfile
    #     ports:
    #         - "5611:5611"
    #     environment:
    #         - DATABASE_URL=root:root@tcp(mysql:3306)/network?parseTime=true
    #         - KAFKA_BROKER=kafka:29092
    #         - POST_URL=post:5611
    #     networks:
    #         - social
    #     depends_on:
    #         - mysql
    #         - kafka
    #         - redis

    # user:
    #     build:
    #         context: .
    #         dockerfile: user-service/Dockerfile
    #     ports:
    #         - "5610:5610"
    #     environment:
    #         - DATABASE_URL=root:root@tcp(mysql:3306)/network?parseTime=true
    #         - USER_URL=user:5610
    #         - REDIS_URL=redis:6379
    #         - ELASTIC_SEARCH_URL=http://elasticsearch:9200
    #         - ELASTICSEARCH_USERNAME=elastic
    #         - ELASTICSEARCH_PASSWORD=admin
    #     depends_on:
    #         - mysql
    #         - redis
    #         - elasticsearch
    #     networks:
    #         - social

    # user-service-migrate:
    #     build:
    #         context: .
    #         dockerfile: user-service/Dockerfile
    #     command: sh -c "/app/user-service migrate"
    #     # or command: ["/app/user-service", "migrate"]
    #     environment:
    #         - DATABASE_URL=root:root@tcp(mysql:3306)/network?parseTime=true
    #     depends_on:
    #         - mysql
    #         - redis
    #         - elasticsearch
    #     networks:
    #         - social
        
    # frontend:
    #     image: nginx:alpine
    #     container_name: frontend
    #     ports:
    #         - "3001:80"
    #     volumes:
    #         - ./web:/usr/share/nginx/html:ro

volumes:
    esdata:
        driver: local
    grafana-data: # Added volume for Grafana
        driver: local
    prometheus:
        driver: local

networks:
    social:
        driver: bridge