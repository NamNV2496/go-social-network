// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/namnv2496/post-service/app"
	"github.com/namnv2496/post-service/internal/configs"
	"github.com/namnv2496/post-service/internal/controller"
	"github.com/namnv2496/post-service/internal/repository"
	"github.com/namnv2496/post-service/internal/repository/database"
	"github.com/namnv2496/post-service/internal/repository/mq/producer"
	"github.com/namnv2496/post-service/internal/service"
)

// Injectors from wire.go:

func Initilize() (*app.App, error) {
	config, err := configs.NewConfig()
	if err != nil {
		return nil, err
	}
	configsDatabase := config.Database
	db := database.NewDatabaseConnection(configsDatabase)
	iLikeRepository, err := repository.NewLikeRepository(db, configsDatabase)
	if err != nil {
		return nil, err
	}
	iLikeCountRepository, err := repository.NewLikeCountRepository(db, configsDatabase)
	if err != nil {
		return nil, err
	}
	iTransaction := repository.NewTransaction(db)
	kafka := config.Kafka
	client := producer.NewClient(kafka)
	iLikeService := service.NewLikeService(iLikeRepository, iLikeCountRepository, iTransaction, client)
	iPostRepository, err := repository.NewPostRepository(db, configsDatabase)
	if err != nil {
		return nil, err
	}
	iPostService := service.NewPostService(iPostRepository, client)
	iCommentRepository, err := repository.NewCommentRepository(db, configsDatabase)
	if err != nil {
		return nil, err
	}
	iCommentService := service.NewCommentService(iCommentRepository, client)
	iController := controller.NewController(config, iLikeService, iPostService, iCommentService)
	appApp := app.NewApp(iController)
	return appApp, nil
}
