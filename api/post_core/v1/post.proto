syntax = "proto3";

package post.v1;

import "google/api/annotations.proto";

message Post {
    uint64 post_id = 1;
    string user_id = 2;
    string content_text = 3;
    repeated string images = 4;
    repeated string tags = 5;
    bool visible = 6;
    string date = 7;
}

message Comment {
    string user_id = 2;
    uint64 comment_id = 3;
    string comment_text = 4;
    uint32 comment_level = 5;
    uint64 comment_parent = 6;
    repeated string images = 7;
    repeated string tags = 8;
    string date = 9;
}

enum Like_Enum {
    UNLIKE = 0;
    LIKE = 1;
  }
  
message Like {
    string user_id = 1;
    uint64 post_id = 2;
    Like_Enum action = 3;
    string date = 4;
}
  
message LikePostResponse {
    uint64 post_id = 1;
    bool like = 2;
    uint64 total_like = 3;
}

// Post
message CreatePostRequest { Post post = 1; }
message CreatePostResponse {
    uint64 post_id = 1;
}

message GetPostRequest {
    string user_id = 1;
    uint32 page_number = 2;
    uint32 page_size = 3;
}
message GetPostResponse {
    repeated Post post = 1;
}

// Comment
message CreateCommentRequest {
    uint64 post_id = 1;
    Comment comment = 2;
    repeated string application = 3;
}

message CreateCommentResponse {
    uint64 comment_id = 1;
}

message GetCommentRequest {
    uint64 post_id = 1;
    uint32 page_number = 2;
    uint32 page_size = 3;
}

message GetCommentResponse {
    repeated Comment comment = 1;
}

message Rule {
    int64 id = 1;
    string application = 2;
    string comment_text = 3;
    bool visible = 4;	
}

message CreateCommentRuleRequest {
    Rule rule = 1;
}

message CreateCommentRuleResponse {
    int64 rule_id = 1;
    string status = 2;
}

message GetCommentRuleByIdRequest {
    int64 rule_id = 1;
    repeated string application = 2;
    uint32 page_number = 3;
    uint32 page_size = 4;
}

message GetCommentRuleByIdResponse {
    Rule rule = 1;
}

message GetCommentRulesRequest {
    repeated string application = 2;
    uint32 page_number = 3;
    uint32 page_size = 4;
}

message GetCommentRulesResponse {
    repeated Rule rules = 1;
}

message UpdateCommentRuleRequest {
    int64 rule_id = 1;
    Rule rule = 2;
}

message UpdateCommentRuleResponse {
    string status = 1;
}

// like
message LikeRequest {
    Like like = 1;
}

message LikeResponse {
    LikePostResponse response = 1;
}

message GetLikeRequest {
    repeated uint64 post_id = 1;
    string user_id = 2;
}

message GetLikeResponse {
    repeated LikePostResponse response = 1;
}

service PostService {
    // post
    rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
        option (google.api.http) = {
			post: "/api/v1/post"
            body: "*"
		};
    }

    rpc GetPost(GetPostRequest) returns (GetPostResponse) {
        option (google.api.http) = {
			get: "/api/v1/posts"
		};
    }
    // comment
    rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse) {
        option (google.api.http) = {
			post: "/api/v1/comment"
            body: "*"
		};
    }

    rpc GetComment(GetCommentRequest) returns (GetCommentResponse) {
        option (google.api.http) = {
			get: "/api/v1/comment"
		};
    }

    rpc CreateCommentRule(CreateCommentRuleRequest) returns (CreateCommentRuleResponse) {
        option (google.api.http) = {
			post: "/api/v1/comment_rule"
            body: "*"
		};
    }
    rpc GetCommentRules(GetCommentRulesRequest) returns (GetCommentRulesResponse) {
        option (google.api.http) = {
			get: "/api/v1/comment_rule"
		};
    }
    rpc GetCommentRuleById(GetCommentRuleByIdRequest) returns (GetCommentRuleByIdResponse) {
        option (google.api.http) = {
			get: "/api/v1/comment_rule/{rule_id}"
		};
    }
    rpc UpdateCommentRule(UpdateCommentRuleRequest) returns (UpdateCommentRuleResponse) {
        option (google.api.http) = {
			put: "/api/v1/comment_rule/{rule_id}"
            body: "*"
		};
    }

    // like
    rpc LikeAction(LikeRequest) returns (LikeResponse) {
        option (google.api.http) = {
			post: "/api/v1/like"
            body: "*"
		};
    }

    rpc Getlike(GetLikeRequest) returns (GetLikeResponse) {
        option (google.api.http) = {
			put: "/api/v1/like"
            body: "*"
		};
    }
}
