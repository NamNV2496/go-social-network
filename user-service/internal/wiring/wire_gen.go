// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/namnv2496/user-service/app"
	"github.com/namnv2496/user-service/internal/cache"
	"github.com/namnv2496/user-service/internal/configs"
	"github.com/namnv2496/user-service/internal/database"
	"github.com/namnv2496/user-service/internal/elasticsearch"
	"github.com/namnv2496/user-service/internal/handler/grpc"
	"github.com/namnv2496/user-service/internal/logic"
	"github.com/namnv2496/user-service/internal/repo"
)

// Injectors from wire.go:

func Initilize() (*app.App, func(), error) {
	config, err := configs.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	configsDatabase := config.Database
	db, cleanup, err := database.NewDatabase(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	goquDatabase := database.InitializeGoquDB(db)
	userRepo := repo.NewUserService(goquDatabase)
	userUserRepo := repo.NewUserUserService(goquDatabase)
	redis := config.Redis
	client := cache.NewRedisClient(redis)
	elasticSearchClient, err := es.NewElasticSearch()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userService := logic.NewUserService(userRepo, userUserRepo, client, elasticSearchClient)
	accountServiceServer := grpc.NewGrpcHander(userService)
	server := grpc.NewServer(accountServiceServer)
	appApp := app.NewApp(server)
	return appApp, func() {
		cleanup()
	}, nil
}
