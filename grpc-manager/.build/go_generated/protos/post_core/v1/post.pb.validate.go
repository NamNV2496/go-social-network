// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/post_core/v1/post.proto

package postv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Post with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PostMultiError, or nil if none found.
func (m *Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	// no validation rules for UserId

	// no validation rules for ContentText

	// no validation rules for Visible

	// no validation rules for Date

	if len(errors) > 0 {
		return PostMultiError(errors)
	}

	return nil
}

// PostMultiError is an error wrapping multiple validation errors returned by
// Post.ValidateAll() if the designated constraints aren't met.
type PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMultiError) AllErrors() []error { return m }

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CommentId

	// no validation rules for CommentText

	// no validation rules for CommentLevel

	// no validation rules for CommentParent

	// no validation rules for Date

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on Like with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Like) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Like with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LikeMultiError, or nil if none found.
func (m *Like) ValidateAll() error {
	return m.validate(true)
}

func (m *Like) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PostId

	// no validation rules for Action

	// no validation rules for Date

	if len(errors) > 0 {
		return LikeMultiError(errors)
	}

	return nil
}

// LikeMultiError is an error wrapping multiple validation errors returned by
// Like.ValidateAll() if the designated constraints aren't met.
type LikeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeMultiError) AllErrors() []error { return m }

// LikeValidationError is the validation error returned by Like.Validate if the
// designated constraints aren't met.
type LikeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeValidationError) ErrorName() string { return "LikeValidationError" }

// Error satisfies the builtin error interface
func (e LikeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLike.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeValidationError{}

// Validate checks the field values on LikePostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LikePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LikePostResponseMultiError, or nil if none found.
func (m *LikePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	// no validation rules for Like

	// no validation rules for TotalLike

	if len(errors) > 0 {
		return LikePostResponseMultiError(errors)
	}

	return nil
}

// LikePostResponseMultiError is an error wrapping multiple validation errors
// returned by LikePostResponse.ValidateAll() if the designated constraints
// aren't met.
type LikePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikePostResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikePostResponseMultiError) AllErrors() []error { return m }

// LikePostResponseValidationError is the validation error returned by
// LikePostResponse.Validate if the designated constraints aren't met.
type LikePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikePostResponseValidationError) ErrorName() string { return "LikePostResponseValidationError" }

// Error satisfies the builtin error interface
func (e LikePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikePostResponseValidationError{}

// Validate checks the field values on CreatePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostRequestMultiError, or nil if none found.
func (m *CreatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostRequestValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostRequestValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostRequestMultiError(errors)
	}

	return nil
}

// CreatePostRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostRequestMultiError) AllErrors() []error { return m }

// CreatePostRequestValidationError is the validation error returned by
// CreatePostRequest.Validate if the designated constraints aren't met.
type CreatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostRequestValidationError) ErrorName() string {
	return "CreatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostRequestValidationError{}

// Validate checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostResponseMultiError, or nil if none found.
func (m *CreatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	if len(errors) > 0 {
		return CreatePostResponseMultiError(errors)
	}

	return nil
}

// CreatePostResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePostResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostResponseMultiError) AllErrors() []error { return m }

// CreatePostResponseValidationError is the validation error returned by
// CreatePostResponse.Validate if the designated constraints aren't met.
type CreatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResponseValidationError) ErrorName() string {
	return "CreatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResponseValidationError{}

// Validate checks the field values on GetPostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostRequestMultiError,
// or nil if none found.
func (m *GetPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPostRequestMultiError(errors)
	}

	return nil
}

// GetPostRequestMultiError is an error wrapping multiple validation errors
// returned by GetPostRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostRequestMultiError) AllErrors() []error { return m }

// GetPostRequestValidationError is the validation error returned by
// GetPostRequest.Validate if the designated constraints aren't met.
type GetPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostRequestValidationError) ErrorName() string { return "GetPostRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostRequestValidationError{}

// Validate checks the field values on GetPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostResponseMultiError, or nil if none found.
func (m *GetPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPost() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPostResponseValidationError{
						field:  fmt.Sprintf("Post[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPostResponseValidationError{
						field:  fmt.Sprintf("Post[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPostResponseValidationError{
					field:  fmt.Sprintf("Post[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPostResponseMultiError(errors)
	}

	return nil
}

// GetPostResponseMultiError is an error wrapping multiple validation errors
// returned by GetPostResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostResponseMultiError) AllErrors() []error { return m }

// GetPostResponseValidationError is the validation error returned by
// GetPostResponse.Validate if the designated constraints aren't met.
type GetPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostResponseValidationError) ErrorName() string { return "GetPostResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostResponseValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentResponseMultiError, or nil if none found.
func (m *GetCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentResponseValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentResponseValidationError{
						field:  fmt.Sprintf("Comment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentResponseValidationError{
					field:  fmt.Sprintf("Comment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentResponseMultiError(errors)
	}

	return nil
}

// GetCommentResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentResponseMultiError) AllErrors() []error { return m }

// GetCommentResponseValidationError is the validation error returned by
// GetCommentResponse.Validate if the designated constraints aren't met.
type GetCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentResponseValidationError) ErrorName() string {
	return "GetCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentResponseValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rule with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuleMultiError, or nil if none found.
func (m *Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Application

	// no validation rules for CommentText

	// no validation rules for Visible

	if len(errors) > 0 {
		return RuleMultiError(errors)
	}

	return nil
}

// RuleMultiError is an error wrapping multiple validation errors returned by
// Rule.ValidateAll() if the designated constraints aren't met.
type RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuleMultiError) AllErrors() []error { return m }

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on CreateCommentRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRuleRequestMultiError, or nil if none found.
func (m *CreateCommentRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentRuleRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRuleRequestMultiError) AllErrors() []error { return m }

// CreateCommentRuleRequestValidationError is the validation error returned by
// CreateCommentRuleRequest.Validate if the designated constraints aren't met.
type CreateCommentRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRuleRequestValidationError) ErrorName() string {
	return "CreateCommentRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRuleRequestValidationError{}

// Validate checks the field values on CreateCommentRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRuleResponseMultiError, or nil if none found.
func (m *CreateCommentRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateCommentRuleResponseMultiError(errors)
	}

	return nil
}

// CreateCommentRuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateCommentRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRuleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRuleResponseMultiError) AllErrors() []error { return m }

// CreateCommentRuleResponseValidationError is the validation error returned by
// CreateCommentRuleResponse.Validate if the designated constraints aren't met.
type CreateCommentRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRuleResponseValidationError) ErrorName() string {
	return "CreateCommentRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRuleResponseValidationError{}

// Validate checks the field values on GetCommentRuleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRuleByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRuleByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRuleByIdRequestMultiError, or nil if none found.
func (m *GetCommentRuleByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRuleByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetCommentRuleByIdRequestMultiError(errors)
	}

	return nil
}

// GetCommentRuleByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommentRuleByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCommentRuleByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRuleByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRuleByIdRequestMultiError) AllErrors() []error { return m }

// GetCommentRuleByIdRequestValidationError is the validation error returned by
// GetCommentRuleByIdRequest.Validate if the designated constraints aren't met.
type GetCommentRuleByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRuleByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRuleByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRuleByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRuleByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRuleByIdRequestValidationError) ErrorName() string {
	return "GetCommentRuleByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRuleByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRuleByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRuleByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRuleByIdRequestValidationError{}

// Validate checks the field values on GetCommentRuleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRuleByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRuleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRuleByIdResponseMultiError, or nil if none found.
func (m *GetCommentRuleByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRuleByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentRuleByIdResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentRuleByIdResponseValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentRuleByIdResponseValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentRuleByIdResponseMultiError(errors)
	}

	return nil
}

// GetCommentRuleByIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommentRuleByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCommentRuleByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRuleByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRuleByIdResponseMultiError) AllErrors() []error { return m }

// GetCommentRuleByIdResponseValidationError is the validation error returned
// by GetCommentRuleByIdResponse.Validate if the designated constraints aren't met.
type GetCommentRuleByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRuleByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRuleByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRuleByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRuleByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRuleByIdResponseValidationError) ErrorName() string {
	return "GetCommentRuleByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRuleByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRuleByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRuleByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRuleByIdResponseValidationError{}

// Validate checks the field values on GetCommentRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRulesRequestMultiError, or nil if none found.
func (m *GetCommentRulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetCommentRulesRequestMultiError(errors)
	}

	return nil
}

// GetCommentRulesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommentRulesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommentRulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRulesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRulesRequestMultiError) AllErrors() []error { return m }

// GetCommentRulesRequestValidationError is the validation error returned by
// GetCommentRulesRequest.Validate if the designated constraints aren't met.
type GetCommentRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRulesRequestValidationError) ErrorName() string {
	return "GetCommentRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRulesRequestValidationError{}

// Validate checks the field values on GetCommentRulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRulesResponseMultiError, or nil if none found.
func (m *GetCommentRulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentRulesResponseValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentRulesResponseValidationError{
					field:  fmt.Sprintf("Rules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentRulesResponseMultiError(errors)
	}

	return nil
}

// GetCommentRulesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentRulesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommentRulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRulesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRulesResponseMultiError) AllErrors() []error { return m }

// GetCommentRulesResponseValidationError is the validation error returned by
// GetCommentRulesResponse.Validate if the designated constraints aren't met.
type GetCommentRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRulesResponseValidationError) ErrorName() string {
	return "GetCommentRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRulesResponseValidationError{}

// Validate checks the field values on UpdateCommentRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRuleRequestMultiError, or nil if none found.
func (m *UpdateCommentRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RuleId

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommentRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommentRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommentRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommentRuleRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentRuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRuleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRuleRequestMultiError) AllErrors() []error { return m }

// UpdateCommentRuleRequestValidationError is the validation error returned by
// UpdateCommentRuleRequest.Validate if the designated constraints aren't met.
type UpdateCommentRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRuleRequestValidationError) ErrorName() string {
	return "UpdateCommentRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRuleRequestValidationError{}

// Validate checks the field values on UpdateCommentRuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRuleResponseMultiError, or nil if none found.
func (m *UpdateCommentRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateCommentRuleResponseMultiError(errors)
	}

	return nil
}

// UpdateCommentRuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRuleResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateCommentRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRuleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRuleResponseMultiError) AllErrors() []error { return m }

// UpdateCommentRuleResponseValidationError is the validation error returned by
// UpdateCommentRuleResponse.Validate if the designated constraints aren't met.
type UpdateCommentRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRuleResponseValidationError) ErrorName() string {
	return "UpdateCommentRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRuleResponseValidationError{}

// Validate checks the field values on LikeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeRequestMultiError, or
// nil if none found.
func (m *LikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLike()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LikeRequestValidationError{
					field:  "Like",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LikeRequestValidationError{
					field:  "Like",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLike()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LikeRequestValidationError{
				field:  "Like",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LikeRequestMultiError(errors)
	}

	return nil
}

// LikeRequestMultiError is an error wrapping multiple validation errors
// returned by LikeRequest.ValidateAll() if the designated constraints aren't met.
type LikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeRequestMultiError) AllErrors() []error { return m }

// LikeRequestValidationError is the validation error returned by
// LikeRequest.Validate if the designated constraints aren't met.
type LikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeRequestValidationError) ErrorName() string { return "LikeRequestValidationError" }

// Error satisfies the builtin error interface
func (e LikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeRequestValidationError{}

// Validate checks the field values on LikeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeResponseMultiError, or
// nil if none found.
func (m *LikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LikeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LikeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LikeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LikeResponseMultiError(errors)
	}

	return nil
}

// LikeResponseMultiError is an error wrapping multiple validation errors
// returned by LikeResponse.ValidateAll() if the designated constraints aren't met.
type LikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeResponseMultiError) AllErrors() []error { return m }

// LikeResponseValidationError is the validation error returned by
// LikeResponse.Validate if the designated constraints aren't met.
type LikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeResponseValidationError) ErrorName() string { return "LikeResponseValidationError" }

// Error satisfies the builtin error interface
func (e LikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeResponseValidationError{}

// Validate checks the field values on GetLikeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLikeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLikeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLikeRequestMultiError,
// or nil if none found.
func (m *GetLikeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLikeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetLikeRequestMultiError(errors)
	}

	return nil
}

// GetLikeRequestMultiError is an error wrapping multiple validation errors
// returned by GetLikeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLikeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLikeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLikeRequestMultiError) AllErrors() []error { return m }

// GetLikeRequestValidationError is the validation error returned by
// GetLikeRequest.Validate if the designated constraints aren't met.
type GetLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLikeRequestValidationError) ErrorName() string { return "GetLikeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLikeRequestValidationError{}

// Validate checks the field values on GetLikeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLikeResponseMultiError, or nil if none found.
func (m *GetLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponse() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLikeResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLikeResponseValidationError{
						field:  fmt.Sprintf("Response[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLikeResponseValidationError{
					field:  fmt.Sprintf("Response[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLikeResponseMultiError(errors)
	}

	return nil
}

// GetLikeResponseMultiError is an error wrapping multiple validation errors
// returned by GetLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLikeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLikeResponseMultiError) AllErrors() []error { return m }

// GetLikeResponseValidationError is the validation error returned by
// GetLikeResponse.Validate if the designated constraints aren't met.
type GetLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLikeResponseValidationError) ErrorName() string { return "GetLikeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLikeResponseValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Template

	// no validation rules for Image

	// no validation rules for Application

	// no validation rules for Visible

	// no validation rules for Link

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on CreateNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotificationRequestMultiError, or nil if none found.
func (m *CreateNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNotificationRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNotificationRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNotificationRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNotificationRequestMultiError(errors)
	}

	return nil
}

// CreateNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotificationRequestMultiError) AllErrors() []error { return m }

// CreateNotificationRequestValidationError is the validation error returned by
// CreateNotificationRequest.Validate if the designated constraints aren't met.
type CreateNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationRequestValidationError) ErrorName() string {
	return "CreateNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationRequestValidationError{}

// Validate checks the field values on CreateNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotificationResponseMultiError, or nil if none found.
func (m *CreateNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateNotificationResponseMultiError(errors)
	}

	return nil
}

// CreateNotificationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNotificationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotificationResponseMultiError) AllErrors() []error { return m }

// CreateNotificationResponseValidationError is the validation error returned
// by CreateNotificationResponse.Validate if the designated constraints aren't met.
type CreateNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationResponseValidationError) ErrorName() string {
	return "CreateNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationResponseValidationError{}

// Validate checks the field values on GetNotificationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationsRequestMultiError, or nil if none found.
func (m *GetNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetNotificationsRequestMultiError(errors)
	}

	return nil
}

// GetNotificationsRequestMultiError is an error wrapping multiple validation
// errors returned by GetNotificationsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationsRequestMultiError) AllErrors() []error { return m }

// GetNotificationsRequestValidationError is the validation error returned by
// GetNotificationsRequest.Validate if the designated constraints aren't met.
type GetNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationsRequestValidationError) ErrorName() string {
	return "GetNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationsRequestValidationError{}

// Validate checks the field values on GetNotificationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationsResponseMultiError, or nil if none found.
func (m *GetNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNotificationsResponseValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNotificationsResponseValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetNotificationsResponseMultiError(errors)
	}

	return nil
}

// GetNotificationsResponseMultiError is an error wrapping multiple validation
// errors returned by GetNotificationsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationsResponseMultiError) AllErrors() []error { return m }

// GetNotificationsResponseValidationError is the validation error returned by
// GetNotificationsResponse.Validate if the designated constraints aren't met.
type GetNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationsResponseValidationError) ErrorName() string {
	return "GetNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationsResponseValidationError{}

// Validate checks the field values on UpdateNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotificationsRequestMultiError, or nil if none found.
func (m *UpdateNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNotificationsRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNotificationsRequestValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotificationsRequestValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNotificationsRequestMultiError(errors)
	}

	return nil
}

// UpdateNotificationsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationsRequestMultiError) AllErrors() []error { return m }

// UpdateNotificationsRequestValidationError is the validation error returned
// by UpdateNotificationsRequest.Validate if the designated constraints aren't met.
type UpdateNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationsRequestValidationError) ErrorName() string {
	return "UpdateNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationsRequestValidationError{}

// Validate checks the field values on UpdateNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotificationsResponseMultiError, or nil if none found.
func (m *UpdateNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateNotificationsResponseMultiError(errors)
	}

	return nil
}

// UpdateNotificationsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationsResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationsResponseMultiError) AllErrors() []error { return m }

// UpdateNotificationsResponseValidationError is the validation error returned
// by UpdateNotificationsResponse.Validate if the designated constraints
// aren't met.
type UpdateNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationsResponseValidationError) ErrorName() string {
	return "UpdateNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationsResponseValidationError{}

// Validate checks the field values on NotifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyRequestMultiError, or
// nil if none found.
func (m *NotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Data

	// no validation rules for Id

	// no validation rules for Application

	if len(errors) > 0 {
		return NotifyRequestMultiError(errors)
	}

	return nil
}

// NotifyRequestMultiError is an error wrapping multiple validation errors
// returned by NotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type NotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyRequestMultiError) AllErrors() []error { return m }

// NotifyRequestValidationError is the validation error returned by
// NotifyRequest.Validate if the designated constraints aren't met.
type NotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRequestValidationError) ErrorName() string { return "NotifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e NotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRequestValidationError{}

// Validate checks the field values on NotifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyResponseMultiError,
// or nil if none found.
func (m *NotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return NotifyResponseMultiError(errors)
	}

	return nil
}

// NotifyResponseMultiError is an error wrapping multiple validation errors
// returned by NotifyResponse.ValidateAll() if the designated constraints
// aren't met.
type NotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyResponseMultiError) AllErrors() []error { return m }

// NotifyResponseValidationError is the validation error returned by
// NotifyResponse.Validate if the designated constraints aren't met.
type NotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyResponseValidationError) ErrorName() string { return "NotifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e NotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyResponseValidationError{}
